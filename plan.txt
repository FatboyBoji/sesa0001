# Backend Implementation Plan for News & Updates System

## 1. Project Setup ✅
1.1. Backend Setup ✅
✅ - Create a new directory 'server_backend' in the project root
✅ - Initialize a new Node.js project with `npm init -y`
✅ - Install necessary dependencies:
  ```bash
  npm install express pg dotenv cors bcrypt jsonwebtoken express-validator
  ```
✅ - Set up TypeScript:
  ```bash
  npm install -D typescript @types/node @types/express @types/pg @types/bcrypt @types/jsonwebtoken
  ```
✅ - Create tsconfig.json for TypeScript configuration

1.2. Database Setup ✅
✅ - Install PostgreSQL
✅ - Create a new database 'sesa_news_db'
✅ - Create necessary tables:
  ```sql
  -- Users table for admin authentication
  CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
  );

  -- News/Updates table
  CREATE TABLE news_updates (
    id SERIAL PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    content TEXT NOT NULL,
    type VARCHAR(50) NOT NULL, -- 'news', 'release', 'framework', 'announcement'
    version VARCHAR(50), -- for releases and frameworks
    published_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
  );
  ```

## 2. Backend Implementation ✅
2.1. Project Structure ✅
✅ Create directory structure:
```
server_backend/
├── src/
│   ├── config/
│   │   ├── database.ts    # Database configuration ✅
│   │   └── auth.ts        # Authentication configuration ✅
│   ├── middleware/
│   │   ├── auth.ts        # Authentication middleware ✅
│   │   └── validation.ts  # Request validation middleware ✅
│   ├── routes/
│   │   ├── auth.ts        # Authentication routes ✅
│   │   └── news.ts        # News/Updates routes ✅
│   ├── controllers/
│   │   ├── auth.ts        # Authentication logic ✅
│   │   └── news.ts        # News/Updates logic ✅
│   ├── models/
│   │   ├── User.ts        # User model ✅
│   │   └── NewsUpdate.ts  # News/Updates model ✅
│   └── server.ts          # Main application file ✅
├── .env                   # Environment variables ✅
└── package.json          # Project configuration ✅
```

2.2. Implementation Steps ✅
✅ 1. Set up environment variables (.env)
   ```
   DB_HOST=localhost
   DB_PORT=5000            # Updated to match your PostgreSQL port
   DB_NAME=sesa_news_db
   DB_USER=postgres
   DB_PASSWORD=your_password
   JWT_SECRET=your_jwt_secret
   PORT=3001
   NODE_ENV=development
   ```

2. Implement authentication system
   ✅ - Create login/register endpoints
   ✅ - Implement JWT token generation and validation
   ✅ - Create authentication middleware
   ✅ - Fix TypeScript type issues in validation and auth routes

3. Implement News/Updates API endpoints:
   ```
   POST   /api/auth/login          # Admin login ✅
   GET    /api/news                # Get all news/updates ✅
   GET    /api/news/:id            # Get specific news/update ✅
   POST   /api/news                # Create news/update (protected) ✅
   PUT    /api/news/:id            # Update news/update (protected) ✅
   DELETE /api/news/:id            # Delete news/update (protected) ✅
   ```

## 3. Frontend Integration
3.1. Admin Interface
1. Create new admin pages:
   - src/app/admin/login/page.tsx ✅
   - src/app/admin/dashboard/page.tsx ✅
   - src/app/admin/news/edit/[id]/page.tsx ⏳
   - src/app/admin/news/create/page.tsx ⏳

2. Implement admin components:
   - NewsForm component for creating/editing news ⏳
   - LoginForm component ✅
   - Dashboard layout with navigation ✅

3.2. API Integration ✅
1. Create API service for frontend: ✅
   ```typescript
   // src/services/api.ts
   - implement authentication service ✅
   - implement news service ✅
   ```

3.3. Form Implementation ✅
1. Rich Text Editor Integration ✅
   - Install TinyMCE or React-Quill ✅
   - Create wrapper component ✅
   - Add image upload support (Future Feature) ⏳

2. Form Validation ✅
   - Client-side validation using Zod ✅
   - Error handling and display ✅
   - Loading states and feedback ✅

3.4. Security Features ✅
1. CSRF Protection ✅
2. Authentication Guards ✅
3. Input Sanitization ✅

## 4. Security Considerations ✅
1. Rate limiting ✅
2. CSRF protection ✅
3. Error handling ✅
4. Input sanitization ✅
5. CORS configuration ✅

## 5. Testing Plan
1. Manual Testing Checklist
   a. Authentication:
      - [ ] Test login with valid credentials✅
      - [ ] Test login with invalid credentials✅
      - [ ] Test token expiration✅
      - [ ] Test protected routes without authenti✅cation✅
      - [ ] Test logout functionality✅

   b. News Management:
      - [ ] Create a new news item✅
      - [ ] Edit an existing news item✅
      - [ ] Delete a news item✅
      - [ ] View all news items✅
      - [ ] Filter news by type✅
      - [ ] Test form validation errors✅
      - [ ] Test rich text editor functionality✅

   c. Error Handling:
      - [ ] Test invalid form submissions✅
      - [ ] Test API error responses✅
      - [ ] Test network error handling✅
      - [ ] Test CSRF token validation✅

2. API Testing✅
   a. Authentication Endpoints:
      ```bash
      # Test login
      curl -X POST http://localhost:3001/api/auth/login \
        -H "Content-Type: application/json" \
        -d '{"username": "admin", "password": "your_password"}'
      ```

   b. News Endpoints:✅
      ```bash
      # Get all news
      curl http://localhost:3001/api/news

      # Create news (requires auth token)
      curl -X POST http://localhost:3001/api/news \
        -H "Authorization: Bearer YOUR_TOKEN" \
        -H "Content-Type: application/json" \
        -H "CSRF-Token: YOUR_CSRF_TOKEN" \
        -d '{
          "title": "Test News",
          "content": "Test Content",
          "type": "news"
        }'

      # Get specific news
      curl http://localhost:3001/api/news/1

      # Update news
      curl -X PUT http://localhost:3001/api/news/1 \
        -H "Authorization: Bearer YOUR_TOKEN" \
        -H "Content-Type: application/json" \
        -H "CSRF-Token: YOUR_CSRF_TOKEN" \
        -d '{
          "title": "Updated Title"
        }'

      # Delete news
      curl -X DELETE http://localhost:3001/api/news/1 \
        -H "Authorization: Bearer YOUR_TOKEN" \
        -H "CSRF-Token: YOUR_CSRF_TOKEN"
      ```

3. Testing Steps
   1. Start Backend Server:
      ```bash
      cd server_backend
      npm run dev
      ```

   2. Start Frontend:
      ```bash
      # In another terminal
      npm run dev
      ```

   3. Create Test User:
      ```sql
      INSERT INTO users (username, password_hash)
      VALUES ('admin', '$2b$10$YOUR_HASHED_PASSWORD');
      ```

   4. Test Flow:
      1. Access admin login: http://localhost:3000/admin/login
      2. Login with test credentials
      3. Create a new news item
      4. Edit the created news
      5. Test filters and search
      6. Delete the news item

4. Common Issues to Check:
   - CORS configuration
   - CSRF token handling
   - Authentication token expiration
   - Form validation feedback
   - Error message display
   - Loading states
   - Rich text editor content saving

## 6. Deployment Considerations
1. Set up database backup system
2. Configure proper logging
3. Set up monitoring
4. Create deployment documentation
5. SSH Server Specific Setup:
   ```bash
   # Database Migration
   - Backup local database: pg_dump -U postgres -p 5000 sesa_news_db > backup.sql
   - Transfer to SSH server: scp backup.sql user@your-ssh-server:/path/
   - Restore on SSH server: psql -U postgres -d sesa_news_db < backup.sql
   
   # Application Deployment
   - Use PM2 for Node.js process management
   - Set up reverse proxy with Nginx
   - Configure SSL certificates
   - Set up environment variables on SSH server
   ```

6. Production Environment Variables:
   ```
   DB_HOST=localhost        # Or your specific DB host
   DB_PORT=5432            # Default PostgreSQL port
   DB_NAME=sesa_news_db
   DB_USER=your_prod_user
   DB_PASSWORD=your_prod_password
   JWT_SECRET=your_prod_jwt_secret
   PORT=3001               # Or your preferred port
   NODE_ENV=production
   ```

7. Backup Strategy:
   - Daily automated backups
   - Keep last 7 daily backups
   - Weekly backup retention for 1 month
   - Monthly backup retention for 1 year

## Implementation Order
1. Set up backend project structure
2. Implement database schema
3. Create basic API endpoints
4. Implement authentication system
5. Create admin interface
6. Integrate frontend with backend
7. Add security measures
8. Write tests
9. Deploy

## Time Estimation
- Backend Setup: 2-3 hours
- Database Implementation: 1-2 hours
- Authentication System: 2-3 hours
- News/Updates API: 2-3 hours
- Admin Interface: 4-5 hours
- Testing: 2-3 hours
- Security & Deployment: 2-3 hours

Total Estimated Time: 15-22 hours

## Additional Notes
- Use prepared statements for all database queries
- Implement proper error handling throughout the application
- Add request validation for all API endpoints
- Document all API endpoints
- Create backup and restore procedures
- Consider implementing audit logging for admin actions
